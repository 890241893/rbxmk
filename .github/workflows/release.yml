name: Create draft release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  PROJECT   : 'rbxmk'   # Name of project/executable.
  PROGRAM   : './rbxmk' # Location of program.
  GOVERSION : 1.17      # Version of Go to compile with.
  DIST      : './dist'  # Scratch directory for building executables.

jobs:

  build:
    name: Build executables
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - {os: 'windows' , arch: 'amd64' , output: './dist/rbxmk.exe'}
          - {os: 'windows' , arch: '386'   , output: './dist/rbxmk.exe'}
          - {os: 'darwin'  , arch: 'amd64' , output: './dist/rbxmk'}
          - {os: 'linux'   , arch: '386'   , output: './dist/rbxmk'}
          - {os: 'linux'   , arch: 'amd64' , output: './dist/rbxmk'}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GOVERSION}}

      - name: Set version variable
        run: echo VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: Make build directory
        run: mkdir ${{env.DIST}}

      - name: Build executable
        env:
          GOOS: ${{matrix.os}}
          GOARCH: ${{matrix.arch}}
          OUTPUT: ${{matrix.output}}
        run: go build -v -trimpath -tags="release" -o $OUTPUT ${{env.PROGRAM}}

      - name: Create archive
        id: archive
        env:
          GOOS: ${{matrix.os}}
          GOARCH: ${{matrix.arch}}
          OUTPUT: ${{matrix.output}}
        run: |
          NAME=$PROJECT-$VERSION-$GOOS-$GOARCH
          ARCHIVE=${{env.DIST}}/$NAME.zip
          zip --junk-paths $ARCHIVE $OUTPUT
          echo ::set-output name=name::$NAME
          echo ::set-output name=path::$ARCHIVE

      - name: Upload executable
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.archive.outputs.name}}
          path: ${{steps.archive.outputs.path}}
          if-no-files-found: error
          retention-days: 1

  release:
    name: Create release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Set version variable
        run: echo VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: Download all archives
        id: download
        uses: actions/download-artifact@v2

      - name: Move files
        run: |
          mkdir files
          mv $(find ${{steps.download.outputs.download-path}} -iname *.zip) files

      - name: Check files
        run: find .

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: repo

      - name: Extract change log
        id: changelog
        run: cat repo/CHANGELOG.md | grep -Pzo '(?<=\n## ${{env.VERSION}}\n)(?s:.)*?(?=\n## )' | tr -d '\000' > RELEASE_BODY.md

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          name: ${{env.PROJECT}} ${{env.VERSION}}
          body_path: RELEASE_BODY.md
          draft: true
          files: files/*.zip
